<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CONSUCOOP - Gestión de Solicitudes</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://unpkg.com/pdf-lib@1.17.0/dist/pdf-lib.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body class="bg-gray-100 font-inter">
  <header class="bg-gradient-to-r from-blue-600 to-blue-800 shadow-lg">
    <nav class="navbar navbar-expand-lg navbar-institucional shadow-sm">
      <div class="container mx-auto">
        <div class="d-flex align-items-center">
          <img src="/images/logo-consucoop.png" alt="CONSUCOOP Logo" class="logo-header h-12 transform hover:scale-105 transition-transform duration-300">
          <a class="navbar-brand text-white font-semibold text-lg" href="/" aria-label="Sistema de Gestión de Solicitudes">
            <div class="navbar-brand-text">
              <span>Sistema de Gestión de Solicitudes</span>
            </div>
          </a>
        </div>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav ms-auto space-x-4">
            <li class="nav-item">
              <a class="nav-link text-white hover:text-blue-200 transition-colors duration-200" href="/aprobacion" data-bs-toggle="tooltip" title="Aprobación de solicitudes por jefe"><i class="bi bi-person-gear me-1"></i>Aprobación Jefe</a>
            </li>
            <li class="nav-item">
              <a class="nav-link text-white hover:text-blue-200 transition-colors duration-200" href="/aprobacion-RH" data-bs-toggle="tooltip" title="Gestión de solicitudes por RRHH"><i class="bi bi-people-fill me-1"></i>RRHH</a>
            </li>
            <li class="nav-item d-flex align-items-center ms-2">
              <div class="user-avatar bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center">
                <i class="bi bi-person-fill"></i>
              </div>
              <span class="text-white d-none d-md-inline ml-2" aria-label="Usuario actual"><%= usuario %></span>
            </li>
          </ul>
        </div>
      </div>
    </nav>
  </header>

  <main class="container mx-auto my-6">
    <section class="page-header" aria-labelledby="page-title">
      <div class="d-flex justify-content-between align-items-center flex-wrap">
        <div>
          <h1 id="page-title" class="text-2xl font-bold mb-1 animate__animated animate__fadeIn">
            <i class="bi bi-list-task me-2"></i>Gestión de Solicitudes
          </h1>
          <p class="mb-0 text-gray-600">Administra y realiza un seguimiento de todas tus solicitudes</p>
        </div>
        <div class="header-actions flex gap-3 flex-wrap">
          <button class="btn bg-blue-600 text-white hover:bg-blue-700 transition-colors duration-200 animate__animated animate__pulse" data-bs-toggle="modal" data-bs-target="#tipoSolicitudModal" data-bs-toggle="tooltip" title="Solicitar días de vacaciones o permisos" aria-label="Nueva solicitud">
            <i class="bi bi-calendar-plus me-1"></i>Nueva Solicitud
          </button>
          <button class="btn bg-blue-600 text-white hover:bg-blue-700 transition-colors duration-200 animate__animated animate__pulse" data-bs-toggle="modal" data-bs-target="#signatureModal" data-bs-toggle="tooltip" title="Subir o editar su firma" aria-label="Subir firma">
  <i class="bi bi-pencil me-1"></i>Subir Firma
</button>
         <!-- <a href="/vehiculos" class="btn border-blue-600 text-blue-600 hover:bg-blue-50 transition-colors duration-200" data-bs-toggle="tooltip" title="Solicitar uso de un vehículo" aria-label="Solicitar vehículos">
            <i class="bi bi-car-front me-1"></i>Vehículos-->
          </a>
        </div>
      </div>
    </section>

    <div class="quick-stats my-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
      <div class="stat-card bg-white rounded-lg shadow-md p-4 text-center ">
        <i class="bi bi-hourglass text-blue-500 text-2xl mb-2"></i>
        <h3 class="text-xl font-semibold"><%= solicitudes.filter(s => s.estado === 'Pendiente').length %></h3>
        <p class="text-gray-600">Pendientes</p>
      </div>
      <div class="stat-card bg-white rounded-lg shadow-md p-4 text-center ">
        <i class="bi bi-check-circle text-green-500 text-2xl mb-2"></i>
        <h3 class="text-xl font-semibold"><%= solicitudes.filter(s => s.estado === 'Aprobado').length %></h3>
        <p class="text-gray-600">Aprobadas</p>
      </div>
      <div class="stat-card bg-white rounded-lg shadow-md p-4 text-center ">
        <i class="bi bi-x-circle text-red-500 text-2xl mb-2"></i>
        <h3 class="text-xl font-semibold"><%= solicitudes.filter(s => s.estado === 'Rechazado').length %></h3>
        <p class="text-gray-600">Rechazadas</p>
      </div>
      <div class="stat-card bg-white rounded-lg shadow-md p-4 text-center ">
        <i class="bi bi-calendar-check text-purple-500 text-2xl mb-2"></i>
        <h3 class="text-xl font-semibold"><%= diasDisponibles ? diasDisponibles.total : '0' %></h3>
        <p class="text-gray-600">Días Disponibles</p>
      </div>
    </div>

    <section class="card shadow-md bg-white rounded-lg" aria-labelledby="solicitudes-title">
      <div class="card-header d-flex justify-content-between align-items-center p-0">
        <ul class="nav nav-tabs" id="indexTabs" role="tablist">
          <li class="nav-item" role="presentation">
            <button class="nav-link active flex items-center" id="pendientes-tab" data-bs-toggle="tab" data-bs-target="#pendientes" type="button" role="tab" aria-controls="pendientes" aria-selected="true">
              <i class="bi bi-hourglass me-1"></i>Pendientes
              <span class="badge bg-blue-600 rounded-pill ms-1"><%= solicitudes.filter(s => s.estado === 'Pendiente').length %></span>
            </button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link flex items-center" id="historico-tab" data-bs-toggle="tab" data-bs-target="#historico" type="button" role="tab" aria-controls="historico" aria-selected="false">
              <i class="bi bi-archive me-1"></i>Histórico
              <span class="badge bg-gray-500 rounded-pill ms-1"><%= solicitudes.filter(s => s.estado !== 'Pendiente').length %></span>
            </button>
          </li>
        </ul>
        <div class="d-flex align-items-center pe-3">
          <div class="tab-export-btn" id="historico-export">
            <div class="flex gap-2">
              <div class="search-box relative">
                <i class="bi bi-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                <input type="text" class="form-control form-control-sm pl-10 border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="searchHistorico" placeholder="Buscar en histórico..." aria-label="Buscar en histórico">
              </div>
              <div class="dropdown">
                 <!-- <button class="btn btn-sm border-blue-600 text-blue-600 hover:bg-blue-50 transition-colors duration-200 dropdown-toggle" type="button" id="filtroEstado" data-bs-toggle="dropdown" data-bs-toggle="tooltip" title="Filtrar solicitudes por estado" aria-expanded="false">
                 <i class="bi bi-funnel me-1"></i>Filtrar-->
                </button>
                <ul class="dropdown-menu" aria-labelledby="filtroEstado">
                  <li><a class="dropdown-item hover:bg-blue-50" href="#" data-filter="all">Todos</a></li>
                  <li><hr class="dropdown-divider"></li>
                  <li><a class="dropdown-item hover:bg-blue-50" href="#" data-filter="Aprobado"><span class="badge bg-success me-2">A</span>Aprobados</a></li>
                  <li><a class="dropdown-item hover:bg-blue-50" href="#" data-filter="Rechazado"><span class="badge bg-danger me-2">R</span>Rechazados</a></li>
                  <li><a class="dropdown-item hover:bg-blue-50" href="#" data-filter="Vacaciones">Vacaciones</a></li>
                  <li><a class="dropdown-item hover:bg-blue-50" href="#" data-filter="Licencia con goce">Licencia con goce</a></li>
                  <li><a class="dropdown-item hover:bg-blue-50" href="#" data-filter="Licencia sin goce">Licencia sin goce</a></li>
                  <li><a class="dropdown-item hover:bg-blue-50" href="#" data-filter="Permiso por hora">Permiso por hora</a></li>
                  <li><a class="dropdown-item hover:bg-blue-50" href="#" data-filter="Permiso tiempo compensatorio">Permiso tiempo compensatorio</a></li>
                  <li><a class="dropdown-item hover:bg-blue-50" href="#" data-filter="Licencia por duelo">Licencia por duelo</a></li>
                  <li><a class="dropdown-item hover:bg-blue-50" href="#" data-filter="Pase de salida laboral">Pase de salida laboral</a></li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="card-body tab-content" id="indexTabContent">
        <div class="tab-pane fade show active" id="pendientes" role="tabpanel" aria-labelledby="pendientes-tab">
          <div class="table-responsive">
            <table class="table table-hover align-middle mb-0" aria-label="Tabla de solicitudes pendientes">
              <thead>
                <tr class="bg-gray-50">
                  <th scope="col">Solicitante</th>
                  <th scope="col">Área</th>
                  <th scope="col">Tipo</th>
                  <th scope="col">Fecha</th>
                  <th scope="col">Periodo</th>
                  <th scope="col">Días/Horas</th>
                  <th scope="col">Estado</th>
                  <th scope="col" class="text-end">Acciones</th>
                </tr>
              </thead>
              <tbody>
                <% if (solicitudes && solicitudes.filter(s => s.estado === 'Pendiente').length > 0) { %>
                  <% solicitudes.filter(s => s.estado === 'Pendiente').sort((a, b) => new Date(b.fecha_solicitud) - new Date(a.fecha_solicitud)).forEach(solicitud => { %>
                    <tr class="animate__animated animate__fadeIn hover:bg-blue-50 transition-colors duration-200">
                      <td>
                        <div class="d-flex align-items-center">
                          <div class="user-avatar bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center">
                            <i class="bi bi-person-fill"></i>
                          </div>
                          <div class="ml-3">
                            <span class="font-medium"><%= solicitud.nombre || 'No disponible' %></span>
                            <div class="text-gray-600 text-sm"><%= solicitud.area_solicitante || '-' %></div>
                          </div>
                        </div>
                      </td>
                      <td><span class="badge bg-gray-200 text-gray-700"><%= solicitud.area_solicitante || '-' %></span></td>
                      <td><span class="badge bg-blue-100 text-blue-600"><%= solicitud.tipo_permiso || 'Vacaciones' %></span></td>
                      <td><%= solicitud.fecha_solicitud ? new Date(solicitud.fecha_solicitud).toISOString().split('T')[0] : '-' %></td>
                      <td>
                        <div class="d-flex flex-column">
                          <span><%= solicitud.fecha_inicio ? new Date(solicitud.fecha_inicio).toISOString().split('T')[0] : '-' %></span>
                          <span class="text-gray-600 text-sm">al <%= solicitud.fecha_fin ? new Date(solicitud.fecha_fin).toISOString().split('T')[0] : '-' %></span>
                        </div>
                      </td>
                      <td>
                        <% if (solicitud.horas_solicitadas) { %>
                          <span class="badge bg-blue-100 text-blue-600"><%= solicitud.horas_solicitadas %> horas</span>
                        <% } else { %>
                          <span class="badge bg-blue-100 text-blue-600"><%= solicitud.total_dias || 0 %> días</span>
                        <% } %>
                      </td>
                      <td><span class="badge bg-yellow-100 text-yellow-600"><i class="bi bi-clock-history me-1"></i><%= solicitud.estado || 'Pendiente' %></span></td>
                      <td class="text-end">
                        <div class="action-buttons flex gap-2 justify-end">
                          <button class="btn btn-sm border-blue-600 text-blue-600 hover:bg-blue-50 transition-colors duration-200 detalles-btn" data-id="<%= solicitud.id %>" data-bs-toggle="modal" data-bs-target="#detallesModal" data-bs-toggle="tooltip" title="Ver detalles de esta solicitud" aria-label="Ver detalles de la solicitud">
                            <i class="bi bi-eye-fill" aria-hidden="true"></i>
                          </button>
                          <button class="btn btn-sm border-red-600 text-red-600 hover:bg-red-50 transition-colors duration-200 cancelar-btn" data-id="<%= solicitud.id %>" data-bs-toggle="tooltip" title="Cancelar esta solicitud" aria-label="Cancelar solicitud">
                            <i class="bi bi-x-circle-fill" aria-hidden="true"></i>
                          </button>
                        </div>
                      </td>
                    </tr>
                  <% }); %>
                <% } else { %>
                  <tr>
                    <td colspan="8" class="text-center py-6">
                      <i class="bi bi-inbox text-4xl text-gray-400" aria-hidden="true"></i>
                      <p class="mt-2 text-gray-600">No hay solicitudes pendientes en este momento</p>
                      <button class="btn bg-blue-600 text-white hover:bg-blue-700 mt-2" data-bs-toggle="modal" data-bs-target="#tipoSolicitudModal">
                        <i class="bi bi-plus-circle me-1"></i>Crear nueva solicitud
                      </button>
                    </td>
                  </tr>
                <% } %>
              </tbody>
            </table>
          </div>
        </div>
        <div class="tab-pane fade" id="historico" role="tabpanel" aria-labelledby="historico-tab">
          <div class="table-responsive">
            <table class="table table-hover align-middle mb-0" id="historico-table" aria-label="Tabla de solicitudes históricas">
              <thead>
                <tr class="bg-gray-50">
                  <th scope="col">Solicitante</th>
                  <th scope="col">Área</th>
                  <th scope="col">Tipo</th>
                  <th scope="col">Fecha</th>
                  <th scope="col">Periodo</th>
                  <th scope="col">Días/Horas</th>
                  <th scope="col">Estado</th>
                  <th scope="col" class="text-end">Acciones</th>
                </tr>
              </thead>
              <tbody id="historico-table-body">
                <% if (solicitudes && solicitudes.filter(s => s.estado !== 'Pendiente').length > 0) { %>
                  <% solicitudes.filter(s => s.estado !== 'Pendiente').sort((a, b) => new Date(b.fecha_solicitud) - new Date(a.fecha_solicitud)).forEach(solicitud => { %>
                    <tr data-estado="<%= (solicitud.estado || 'Desconocido').toLowerCase() %>" data-tipo="<%= (solicitud.tipo_permiso || 'Vacaciones').toLowerCase() %>" data-search="<%= (solicitud.nombre || 'No disponible').toLowerCase() %> <%= (solicitud.area_solicitante || 'Sin área').toLowerCase() %> <%= (solicitud.estado || 'Desconocido').toLowerCase() %> <%= (solicitud.tipo_permiso || 'Vacaciones').toLowerCase() %>" class="hover:bg-blue-50 transition-colors duration-200">
                      <td>
                        <div class="d-flex align-items-center">
                          <div class="user-avatar bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center">
                            <i class="bi bi-person-fill"></i>
                          </div>
                          <div class="ml-3">
                            <span class="font-medium"><%= solicitud.nombre || 'No disponible' %></span>
                            <div class="text-gray-600 text-sm"><%= solicitud.area_solicitante || '-' %></div>
                          </div>
                        </div>
                      </td>
                      <td><span class="badge bg-gray-200 text-gray-700"><%= solicitud.area_solicitante || '-' %></span></td>
                      <td><span class="badge bg-blue-100 text-blue-600"><%= solicitud.tipo_permiso || 'Vacaciones' %></span></td>
                      <td><%= solicitud.fecha_solicitud ? new Date(solicitud.fecha_solicitud).toISOString().split('T')[0] : '-' %></td>
                      <td>
                        <div class="d-flex flex-column">
                          <span><%= solicitud.fecha_inicio ? new Date(solicitud.fecha_inicio).toISOString().split('T')[0] : '-' %></span>
                          <span class="text-gray-600 text-sm">al <%= solicitud.fecha_fin ? new Date(solicitud.fecha_fin).toISOString().split('T')[0] : '-' %></span>
                        </div>
                      </td>
                      <td>
                        <% if (solicitud.horas_solicitadas) { %>
                          <span class="badge bg-blue-100 text-blue-600"><%= solicitud.horas_solicitadas %> horas</span>
                        <% } else { %>
                          <span class="badge bg-blue-100 text-blue-600"><%= solicitud.total_dias || 0 %> días</span>
                        <% } %>
                      </td>
                      <td>
                        <% if (solicitud.estado === 'Aprobado') { %>
                          <span class="badge bg-green-100 text-green-600"><i class="bi bi-check-circle me-1"></i>Aprobado</span>
                        <% } else if (solicitud.estado === 'Rechazado') { %>
                          <span class="badge bg-red-100 text-red-600"><i class="bi bi-x-circle me-1"></i>Rechazado</span>
                        <% } else { %>
                          <span class="badge bg-blue-100 text-blue-600"><i class="bi bi-info-circle me-1"></i><%= solicitud.estado || 'Desconocido' %></span>
                        <% } %>
                      </td>
                      <td class="text-end">
                        <div class="action-buttons flex gap-2 justify-end">
                          <button class="btn btn-sm border-blue-600 text-blue-600 hover:bg-blue-50 transition-colors duration-200 detalles-btn" data-id="<%= solicitud.id %>" data-bs-toggle="modal" data-bs-target="#detallesModal" data-bs-toggle="tooltip" title="Ver detalles de esta solicitud" aria-label="Ver detalles de la solicitud">
                            <i class="bi bi-eye-fill" aria-hidden="true"></i>
                          </button>
                          <% if (solicitud.estado === 'Aprobado') { %>
                            <button class="btn btn-sm border-red-600 text-red-600 hover:bg-red-50 transition-colors duration-200 pdf-btn" data-id="<%= solicitud.id %>" data-bs-toggle="tooltip" title="Descargar comprobante en PDF" aria-label="Descargar PDF">
                              <i class="bi bi-file-pdf-fill text-danger" aria-hidden="true"></i>
                            </button>
                          <% } %>
                        </div>
                      </td>
                    </tr>
                  <% }); %>
                <% } else { %>
                  <tr id="no-data-message">
                    <td colspan="8" class="text-center py-6">
                      <i class="bi bi-archive text-4xl text-gray-400" aria-hidden="true"></i>
                      <p class="mt-2 text-gray-600">No hay solicitudes registradas en el histórico</p>
                      <button class="btn bg-blue-600 text-white hover:bg-blue-700 mt-2" data-bs-toggle="modal" data-bs-target="#tipoSolicitudModal">
                        <i class="bi bi-plus-circle me-1"></i>Crear nueva solicitud
                      </button>
                    </td>
                  </tr>
                <% } %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </section>

    <a href="#" class="floating-action-btn d-lg-none fixed bottom-6 right-6 bg-blue-600 text-white rounded-full w-12 h-12 flex items-center justify-center shadow-lg hover:bg-blue-700 transition-colors duration-200" data-bs-toggle="modal" data-bs-target="#tipoSolicitudModal" aria-label="Nueva solicitud">
      <i class="bi bi-plus text-xl"></i>
    </a>
<!-- Modal para subir/editar firma -->
<div class="modal fade" id="signatureModal" tabindex="-1" aria-labelledby="signatureModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content border-0 shadow">
      <!-- Encabezado con color de acento -->
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title fs-5 fw-bold" id="signatureModalLabel">
          <i class="bi bi-pen-fill me-2"></i>Subir/Editar Firma
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      
      <div class="modal-body p-4">
        <form id="signatureForm">
          <!-- Sección de subida de archivo -->
          <div class="mb-4">
            <label for="signatureInput" class="form-label fw-semibold text-muted">Seleccione su firma</label>
            <div class="input-group">
              <input type="file" class="form-control border-2" id="signatureInput" name="signature" accept="image/png,image/jpeg" required>
              <span class="input-group-text bg-light">PNG o JPG (máx. 2MB)</span>
            </div>
          </div>
          
          <!-- Sección de vistas previas -->
          <div class="row g-4 mb-4">
            <!-- Vista previa de la nueva firma -->
            <div class="col-md-6">
              <div class="card h-100 border-0 shadow-sm">
                <div class="card-body text-center">
                  <h6 class="card-title text-primary mb-3">
                    <i class="bi bi-eye-fill me-2"></i>Nueva Firma
                  </h6>
                  <div class="d-flex justify-content-center align-items-center bg-light rounded p-3" style="min-height: 150px;">
                    <img id="signaturePreview" src="" alt="Vista previa de la firma" class="img-fluid" style="max-height: 120px; display: none;">
                    <span id="previewPlaceholder" class="text-muted">Vista previa aparecerá aquí</span>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Firma actual -->
            <div class="col-md-6">
              <div class="card h-100 border-0 shadow-sm">
                <div class="card-body text-center">
                  <h6 class="card-title text-secondary mb-3">
                    <i class="bi bi-file-earmark-image me-2"></i>Firma Actual
                  </h6>
                  <div class="d-flex justify-content-center align-items-center bg-light rounded p-3" style="min-height: 150px;">
                    <img id="currentSignature" src="/signature" alt="Firma actual" class="img-fluid" style="max-height: 120px;" onerror="this.style.display='none'; document.getElementById('noSignatureText').style.display='block';">
                    <span id="noSignatureText" class="text-muted" style="display: none;">No hay firma registrada</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Botón de acción -->
          <div class="d-grid">
            <button type="submit" class="btn btn-primary btn-lg py-2 fw-bold">
              <i class="bi bi-save-fill me-2"></i>Guardar Firma
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
    <!-- Modal de selección de tipo de solicitud -->
    <div class="modal fade" id="tipoSolicitudModal" tabindex="-1" aria-labelledby="tipoSolicitudModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content rounded-lg shadow-xl">
          <div class="modal-header bg-blue-600 text-white">
            <h5 class="modal-title font-semibold" id="tipoSolicitudModalLabel"><i class="bi bi-list-check me-2"></i>Seleccionar Tipo de Solicitud</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
          </div>
          <div class="modal-body p-6 bg-gray-50">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div class="card h-100 tipo-solicitud-card bg-white rounded-lg shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200" data-tipo="Vacaciones">
                <div class="card-body text-center p-4">
                  <i class="bi bi-calendar-event text-blue-500 text-3xl mb-2 animate__animated animate__pulse animate__infinite"></i>
                  <h6 class="card-title font-semibold">Vacaciones</h6>
                  <p class="card-text text-sm text-gray-600">Solicita tus días de vacaciones disponibles</p>
                </div>
              </div>
            <!--  <div class="card h-100 tipo-solicitud-card bg-white rounded-lg shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200" data-tipo="Licencia con goce">
                <div class="card-body text-center p-4">
                  <i class="bi bi-briefcase text-blue-500 text-3xl mb-2 animate__animated animate__pulse animate__infinite"></i>
                  <h6 class="card-title font-semibold">Licencia con goce</h6>
                  <p class="card-text text-sm text-gray-600">Permiso con salario</p>
                </div>
              </div>
              <div class="card h-100 tipo-solicitud-card bg-white rounded-lg shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200" data-tipo="Licencia sin goce">
                <div class="card-body text-center p-4">
                  <i class="bi bi-briefcase-fill text-blue-500 text-3xl mb-2 animate__animated animate__pulse animate__infinite"></i>
                  <h6 class="card-title font-semibold">Licencia sin goce</h6>
                  <p class="card-text text-sm text-gray-600">Permiso sin salario</p>
                </div>
              </div>
              <div class="card h-100 tipo-solicitud-card bg-white rounded-lg shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200" data-tipo="Permiso por hora">
                <div class="card-body text-center p-4">
                  <i class="bi bi-clock text-blue-500 text-3xl mb-2 animate__animated animate__pulse animate__infinite"></i>
                  <h6 class="card-title font-semibold">Permiso por hora</h6>
                  <p class="card-text text-sm text-gray-600">Ausencia por horas específicas</p>
                </div>
              </div>
              <div class="card h-100 tipo-solicitud-card bg-white rounded-lg shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200" data-tipo="Permiso tiempo compensatorio">
                <div class="card-body text-center p-4">
                  <i class="bi bi-arrow-repeat text-blue-500 text-3xl mb-2 animate__animated animate__pulse animate__infinite"></i>
                  <h6 class="card-title font-semibold">Tiempo compensatorio</h6>
                  <p class="card-text text-sm text-gray-600">Compensación por horas trabajadas</p>
                </div>
              </div>
              <div class="card h-100 tipo-solicitud-card bg-white rounded-lg shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200" data-tipo="Licencia por duelo">
                <div class="card-body text-center p-4">
                  <i class="bi bi-heartbreak text-blue-500 text-3xl mb-2 animate__animated animate__pulse animate__infinite"></i>
                  <h6 class="card-title font-semibold">Licencia por duelo</h6>
                  <p class="card-text text-sm text-gray-600">Permiso por fallecimiento de familiar</p>
                </div>
              </div>
              <div class="card h-100 tipo-solicitud-card bg-white rounded-lg shadow-md hover:shadow-lg transform hover:-translate-y-1 transition-all duration-200" data-tipo="Pase de salida laboral">
                <div class="card-body text-center p-4">
                  <i class="bi bi-door-open text-blue-500 text-3xl mb-2 animate__animated animate__pulse animate__infinite"></i>
                  <h6 class="card-title font-semibold">Pase de salida laboral</h6>
                  <p class="card-text text-sm text-gray-600">Salida temporal por motivos laborales</p>
                </div>
              </div>-->
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn bg-gray-500 text-white hover:bg-gray-600 transition-colors duration-200" data-bs-dismiss="modal">Cancelar</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal dinámico para formulario de solicitud -->
    <div class="modal fade" id="solicitudFormModal" tabindex="-1" aria-labelledby="solicitudFormModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content rounded-lg shadow-xl">
          <div class="modal-header bg-blue-600 text-white">
            <h5 class="modal-title font-semibold" id="solicitudFormModalLabel"><i class="bi bi-calendar-plus me-2"></i>Nueva Solicitud</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
          </div>
          <div class="modal-body p-6 bg-gray-50">
            <form id="solicitudForm" aria-describedby="formInstructions">
              <div class="alert alert-info bg-blue-100 text-blue-800 border-blue-200">
                <i class="bi bi-info-circle me-2"></i>Complete los campos para su solicitud. Los campos con <span class="text-red-600">*</span> son obligatorios.
              </div>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="mb-3">
                  <label for="nombrePersona" class="form-label font-medium">Nombre <span class="text-red-600">*</span></label>
                  <input type="text" class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="nombrePersona" name="nombrePersona" value="<%= puesto.NombrePersona %>" readonly>
                  <small class="text-gray-600">Su nombre registrado en el sistema</small>
                </div>
                <div class="mb-3">
                  <label for="areaSolicitante" class="form-label font-medium">Área <span class="text-red-600">*</span></label>
                  <input type="text" class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="areaSolicitante" value="<%= puesto.unidad || 'Sin Área' %>" readonly>
                  <small class="text-gray-600">El departamento donde trabaja</small>
                </div>
              </div>
              <input type="hidden" id="tipoPermiso" name="tipoPermiso">
              <div id="formFieldsContainer"></div>
              <div id="formError" class="alert alert-danger d-none"></div>
              <div class="alert alert-warning bg-yellow-100 text-yellow-800 border-yellow-200 mt-3">
                <i class="bi bi-exclamation-triangle me-2"></i>
                <strong>Importante:</strong> La solicitud debe tramitarse con al menos cuatro días de antelación.
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn bg-gray-500 text-white hover:bg-gray-600 transition-colors duration-200" data-bs-dismiss="modal" data-bs-toggle="tooltip" title="Cerrar sin guardar">Cancelar</button>
            <button type="submit" class="btn bg-blue-600 text-white hover:bg-blue-700 transition-colors duration-200" form="solicitudForm" data-bs-toggle="tooltip" title="Enviar solicitud">
              <i class="bi bi-send me-1"></i>Enviar Solicitud
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal de detalles -->
    <div class="modal fade" id="detallesModal" tabindex="-1" aria-labelledby="detallesModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content rounded-lg shadow-xl">
          <div class="modal-header bg-blue-600 text-white">
            <h5 class="modal-title font-semibold" id="detallesModalLabel"><i class="bi bi-file-text me-2"></i>Detalles de la Solicitud</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
          </div>
          <div class="modal-body p-6 bg-gray-50">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div class="card mb-3 shadow-sm">
                <div class="card-header bg-gray-100">
                  <h6 class="mb-0 font-semibold"><i class="bi bi-person-lines-fill me-2"></i>Información del Solicitante</h6>
                </div>
                <div class="card-body">
                  <dl class="grid grid-cols-1 sm:grid-cols-2 gap-2 mb-0">
                    <dt class="font-medium">Nombre:</dt>
                    <dd id="detalleNombre">-</dd>
                    <dt class="font-medium">Área:</dt>
                    <dd id="detalleArea">-</dd>
                    <dt class="font-medium">Fecha Solicitud:</dt>
                    <dd id="detalleFechaSolicitud">-</dd>
                    <dt class="font-medium">Tipo:</dt>
                    <dd id="detalleTipoPermiso">-</dd>
                  </dl>
                </div>
              </div>
              <div class="card mb-3 shadow-sm">
                <div class="card-header bg-gray-100">
                  <h6 class="mb-0 font-semibold"><i class="bi bi-calendar-range me-2"></i>Detalles de la Solicitud</h6>
                </div>
                <div class="card-body">
                  <dl class="grid grid-cols-1 sm:grid-cols-2 gap-2 mb-0">
                    <dt class="font-medium">Periodo:</dt>
                    <dd id="detallePeriodo">-</dd>
                    <dt class="font-medium">Reincorporación:</dt>
                    <dd id="detalleFechaReincorporacion">-</dd>
                    <dt class="font-medium">Días/Horas:</dt>
                    <dd id="detalleDiasHoras">-</dd>
                    <dt class="font-medium">Estado:</dt>
                    <dd id="detalleEstado">-</dd>
                  </dl>
                </div>
              </div>
            </div>
            <div class="card shadow-sm">
              <div class="card-header bg-gray-100">
                <h6 class="mb-0 font-semibold"><i class="bi bi-chat-left-text me-2"></i>Observaciones</h6>
              </div>
              <div class="card-body">
                <p id="detalleObservaciones" class="mb-0">-</p>
              </div>
            </div>
            <div class="card shadow-sm mt-3">
              <div class="card-header bg-gray-100">
                <h6 class="mb-0 font-semibold"><i class="bi bi-info-circle me-2"></i>Motivo</h6>
              </div>
              <div class="card-body">
                <p id="detalleMotivo" class="mb-0">-</p>
              </div>
            </div>
            <div id="comentariosRechazo" class="card mt-3 border-red-600" style="display: none;">
              <div class="card-header bg-red-600 text-white">
                <h6 class="mb-0 font-semibold"><i class="bi bi-exclamation-triangle me-2"></i>Motivo de Rechazo</h6>
              </div>
              <div class="card-body">
                <p id="detalleComentariosRechazo" class="mb-0">-</p>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn bg-gray-500 text-white hover:bg-gray-600 transition-colors duration-200" data-bs-dismiss="modal">Cerrar</button>
            <button type="button" class="btn bg-red-600 text-white hover:bg-red-700 transition-colors duration-200" id="cancelarSolicitudBtn" style="display: none;">
              <i class="bi bi-x-circle me-1"></i>Cancelar Solicitud
            </button>
            <button type="button" class="btn bg-blue-600 text-white hover:bg-blue-700 transition-colors duration-200" id="generatePDFBtn" style="display: none;">
              <i class="bi bi-file-pdf me-1"></i>Descargar PDF
            </button>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    const solicitudes = <%- JSON.stringify(solicitudes || []) %>;
    const { jsPDF } = window.jspdf;
    let currentSolicitud = null;
 // Función para verificar si el usuario tiene firma
    async function checkSignature() {
  try {
    const response = await fetch('/check-signature', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || '',
      },
      credentials: 'include',
    });
    const result = await response.json();
    console.log('Respuesta de /check-signature:', result);
    if (!result.success) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: result.error || 'No se pudo verificar la firma.',
      });
      return false;
    }
    return result.hasSignature;
  } catch (error) {
    console.error('Error al verificar firma:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error de Conexión',
      text: 'No se pudo conectar con el servidor para verificar la firma.',
    });
    return false;
  }
}

// Manejo del modal de firma
function setupSignatureForm() {
  const signatureModal = document.getElementById('signatureModal');
  const form = document.getElementById('signatureForm');
  const input = document.getElementById('signatureInput');
  const preview = document.getElementById('signaturePreview');
  const currentSignature = document.getElementById('currentSignature');

  if (!signatureModal || !form || !input || !preview || !currentSignature) {
    console.error('Elementos del formulario de firma no encontrados');
    return;
  }

  input.addEventListener('change', (event) => {
    const file = event.target.files[0];
    if (file) {
      if (!['image/png', 'image/jpeg'].includes(file.type)) {
        Swal.fire({ icon: 'error', title: 'Formato no permitido', text: 'Solo se permiten archivos PNG o JPG.' });
        input.value = '';
        preview.style.display = 'none';
        return;
      }
      if (file.size > 2 * 1024 * 1024) {
        Swal.fire({ icon: 'error', title: 'Archivo demasiado grande', text: 'El archivo no debe exceder los 2MB.' });
        input.value = '';
        preview.style.display = 'none';
        return;
      }
      const reader = new FileReader();
      reader.onload = (e) => {
        preview.src = e.target.result;
        preview.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      preview.src = '';
      preview.style.display = 'none';
    }
  });

  form.addEventListener('submit', async (event) => {
    event.preventDefault();
    const formData = new FormData(form);
    try {
      const response = await fetch('/upload-signature', {
        method: 'POST',
        body: formData,
        headers: { 'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || '' },
      });
      const result = await response.json();
      console.log('Respuesta de /upload-signature:', result);

      if (result.success) {
        Swal.fire({
          icon: 'success',
          title: 'Firma Guardada',
          text: result.message || 'Su firma ha sido registrada correctamente.',
          timer: 2000,
          showConfirmButton: false,
        }).then(() => {
          bootstrap.Modal.getInstance(signatureModal).hide();
          form.reset();
          preview.src = '';
          preview.style.display = 'none';
          currentSignature.src = `/signature?t=${Date.now()}`;
          currentSignature.style.display = 'block';
          currentSignature.alt = 'Firma actual';
        });
      } else {
        Swal.fire({ icon: 'error', title: 'Error', text: result.error || 'No se pudo guardar la firma.' });
      }
    } catch (error) {
      console.error('Error al enviar la firma:', error);
      Swal.fire({ icon: 'error', title: 'Error de Conexión', text: 'No se pudo conectar con el servidor.' });
    }
  });
}
// Manejo del botón "Nueva Solicitud"
  function setupNuevaSolicitudButton() {
  const nuevaSolicitudBtn = document.querySelector('button[data-bs-target="#tipoSolicitudModal"]');
  if (!nuevaSolicitudBtn) {
    console.error('Botón de Nueva Solicitud no encontrado');
    return;
  }

  nuevaSolicitudBtn.addEventListener('click', async (e) => {
    e.preventDefault();
    const hasSignature = await checkSignature();
    if (!hasSignature) {
      Swal.fire({
        icon: 'warning',
        title: 'Firma Requerida',
        html: `
          <p>No tienes una firma registrada.</p>
          <p>Por favor, sube tu firma antes de enviar una solicitud de vacaciones.</p>
        `,
        confirmButtonText: 'Subir Firma',
        showCancelButton: true,
        cancelButtonText: 'Cancelar',
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
      }).then((result) => {
        if (result.isConfirmed) {
          const signatureModal = new bootstrap.Modal(document.getElementById('signatureModal'));
          signatureModal.show();
        }
      });
    } else {
      const tipoSolicitudModal = new bootstrap.Modal(document.getElementById('tipoSolicitudModal'));
      tipoSolicitudModal.show();
    }
  });
}
// Modificar la función setupTipoSolicitud para validar firma en "Vacaciones"
 async function setupTipoSolicitud() {
    document.querySelectorAll('.tipo-solicitud-card').forEach(card => {
      card.addEventListener('click', async () => {
        const tipo = card.dataset.tipo;
        if (tipo === 'Vacaciones') {
          const hasSignature = await checkSignature();
          if (!hasSignature) {
            Swal.fire({
              icon: 'warning',
              title: 'Firma Requerida',
              html: `
                <p>No tienes una firma registrada.</p>
                <p>Por favor, sube tu firma antes de enviar una solicitud de vacaciones.</p>
              `,
              confirmButtonText: 'Subir Firma',
              showCancelButton: true,
              cancelButtonText: 'Cancelar',
              confirmButtonColor: '#3085d6',
              cancelButtonColor: '#d33',
            }).then((result) => {
              if (result.isConfirmed) {
                // Cerrar el modal de tipo de solicitud si está abierto
                const tipoSolicitudModal = bootstrap.Modal.getInstance(document.getElementById('tipoSolicitudModal'));
                if (tipoSolicitudModal) tipoSolicitudModal.hide();
                // Abrir el modal de firma
                const signatureModal = new bootstrap.Modal(document.getElementById('signatureModal'));
                signatureModal.show();
              }
            });
            return; // Detener el flujo si no hay firma
          }
        }
        // Si hay firma o no es "Vacaciones", proceder normalmente
        loadDynamicForm(tipo);
        const tipoSolicitudModal = bootstrap.Modal.getInstance(document.getElementById('tipoSolicitudModal'));
        if (tipoSolicitudModal) tipoSolicitudModal.hide();
        const solicitudFormModal = new bootstrap.Modal(document.getElementById('solicitudFormModal'));
        solicitudFormModal.show();
      });
    });
  }

    function updateDiasSolicitados() {
      const totalDiasInput = document.getElementById('totalDias');
      const diasSolicitadosDisplay = document.getElementById('diasSolicitadosDisplay');
      if (totalDiasInput && diasSolicitadosDisplay) {
        const dias = totalDiasInput.value || '0';
        diasSolicitadosDisplay.textContent = dias;
        console.log('Dias solicitados actualizados:', dias);
      }
    }

function calcularTotalDias(fechaInicio, fechaFin) {
      try {
        console.log('Calculando días:', { fechaInicio, fechaFin });
        if (!fechaInicio || !fechaFin) {
          return { dias: 0, error: 'Seleccione ambas fechas.' };
        }

        const inicio = new Date(fechaInicio + 'T00:00:00Z');
        const fin = new Date(fechaFin + 'T00:00:00Z');

        if (isNaN(inicio.getTime()) || isNaN(fin.getTime())) {
          return { dias: 0, error: 'Fechas inválidas.' };
        }
        if (inicio > fin) {
          return { dias: 0, error: 'La fecha de inicio debe ser anterior o igual a la fecha de fin.' };
        }

        let totalDias = 0;
        let currentDate = new Date(inicio);

        while (currentDate <= fin) {
          const diaSemana = currentDate.getDay();
          if (diaSemana !== 0 && diaSemana !== 6) {
            totalDias++;
          }
          currentDate.setDate(currentDate.getDate() + 1);
        }

        console.log('Total días calculados:', totalDias);
        return {
          dias: totalDias,
          error: totalDias === 0 ? 'No se encontraron días laborables en el rango seleccionado.' : null
        };
      } catch (error) {
        console.error('Error en calcularTotalDias:', error);
        return { dias: 0, error: 'Error al calcular los días: ' + error.message };
      }
    }



    function calcularFechaReincorporacion(fechaFin) {
      try {
        console.log('Calculando fecha de reincorporación:', fechaFin);
        if (!fechaFin) return '';

        const fin = new Date(fechaFin + 'T00:00:00Z');
        if (isNaN(fin.getTime())) return '';

        let reincorporacion = new Date(fin);
        reincorporacion.setDate(fin.getDate() + 1);

        while (reincorporacion.getDay() === 0 || reincorporacion.getDay() === 6) {
          reincorporacion.setDate(reincorporacion.getDate() + 1);
        }

        const result = reincorporacion.toISOString().split('T')[0];
        console.log('Fecha de reincorporación:', result);
        return result;
      } catch (error) {
        console.error('Error en calcularFechaReincorporacion:', error);
        return '';
      }
    }
let diasDisponiblesPorAno = [];
 async function loadDynamicForm(tipoPermiso) {
  const formFieldsContainer = document.getElementById('formFieldsContainer');
  const solicitudFormModalLabel = document.getElementById('solicitudFormModalLabel');
  const tipoPermisoInput = document.getElementById('tipoPermiso');
  tipoPermisoInput.value = tipoPermiso;
  solicitudFormModalLabel.textContent = `Nueva Solicitud - ${tipoPermiso}`;

  console.log('loadDynamicForm ejecutado con tipoPermiso:', tipoPermiso);

  let formFields = '';
  let diasDisponiblesPorAno = [];
  let totalDiasDisponibles = <%= diasDisponibles ? diasDisponibles.total : 0 %>;
  const currentYear = new Date().getFullYear();
  const validYears = [currentYear, currentYear - 1, currentYear - 2];

  if (tipoPermiso === 'Vacaciones') {
    try {
      const response = await fetch('/dias-disponibles');
      if (response.ok) {
        const data = await response.json();
        console.log('Respuesta completa de /dias-disponibles:', data);
        if (data.success && data.diasDisponibles) {
          diasDisponiblesPorAno = (data.diasDisponibles.anos || []).filter(ano => validYears.includes(parseInt(ano.ano)));
          totalDiasDisponibles = data.diasDisponibles.total || 0;
        } else {
          console.error('Estructura de respuesta inesperada:', data);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'No se pudieron cargar los días disponibles. Contacte al administrador.'
          });
          formFieldsContainer.innerHTML = '<div class="text-red-600">Error al cargar el formulario de vacaciones.</div>';
          return;
        }
      } else {
        console.error('Error al obtener días disponibles:', response.statusText);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'No se pudo conectar con el servidor.'
        });
        formFieldsContainer.innerHTML = '<div class="text-red-600">Error al cargar el formulario de vacaciones.</div>';
        return;
      }
    } catch (error) {
      console.error('Error en fetch /dias-disponibles:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'No se pudo conectar con el servidor. Verifique su conexión.'
      });
      formFieldsContainer.innerHTML = '<div class="text-red-600">Error al cargar el formulario de vacaciones.</div>';
      return;
    }
  }

  console.log('Condiciones para renderizar selección de años:', {
    tipoPermiso,
    diasDisponiblesPorAnoLength: diasDisponiblesPorAno.length,
    totalDiasDisponibles
  });

  if (tipoPermiso === 'Permiso por hora') {
    formFields = `
      <div class="mb-3">
        <label for="fechaSolicitud" class="form-label fw-medium">Fecha de Solicitud <span class="text-red-600">*</span></label>
        <input type="date" class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="fechaSolicitud" value="${new Date().toISOString().split('T')[0]}" readonly>
        <small class="text-gray-600">Fecha actual</small>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-3 mb-3">
        <div>
          <label for="fechaPermiso" class="form-label fw-medium">Fecha del Permiso <span class="text-red-600">*</span></label>
          <input type="date" class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="fechaPermiso" name="fechaPermiso" required>
          <small class="text-gray-600">Día en que se tomará el permiso</small>
        </div>
        <div>
          <label for="horaInicio" class="form-label fw-medium">Desde <span class="text-red-600">*</span></label>
          <input type="time" class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="horaInicio" name="horaInicio" required>
          <small class="text-gray-600">Hora de inicio del permiso</small>
        </div>
        <div>
          <label for="horaFin" class="form-label fw-medium">Hasta <span class="text-red-600">*</span></label>
          <input type="time" class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="horaFin" name="horaFin" required>
          <small class="text-gray-600">Hora de fin del permiso</small>
        </div>
      </div>
      <div class="mb-3">
        <label for="horasSolicitadas" class="form-label fw-medium">Total de Tiempo Concedido <span class="text-red-600">*</span></label>
        <input type="number" class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="horasSolicitadas" name="horasSolicitadas" readonly>
        <small class="text-gray-600">Horas calculadas automáticamente (mínimo 0.5, máximo 8)</small>
      </div>
      <div class="mb-3">
        <label for="motivo" class="form-label fw-medium">Motivo</label>
        <textarea class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="motivo" name="motivo" rows="3" placeholder="Escriba el motivo del permiso (opcional)"></textarea>
        <small class="text-gray-600">Detalles adicionales sobre el permiso</small>
      </div>
    `;
  } else {
    const isMotivoRequired = tipoPermiso === 'Licencia por duelo' || tipoPermiso === 'Pase de salida laboral';
    formFields = `
      <div class="mb-3">
        <label for="fechaSolicitud" class="form-label fw-medium">Fecha de Solicitud <span class="text-red-600">*</span></label>
        <input type="date" class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="fechaSolicitud" value="${new Date().toISOString().split('T')[0]}" readonly>
        <small class="text-gray-600">Fecha actual</small>
      </div>
      <div class="mb-3 bg-gray-100 p-3 rounded-lg">
        <label class="form-label fw-medium">Días Disponibles</label>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
          <div>
            <div class="flex items-center">
              <span class="text-xl font-bold text-blue-600 me-2" id="diasDisponiblesDisplay">${totalDiasDisponibles}</span>
              <span class="text-gray-600">días totales</span>
            </div>
          </div>
          <div>
            <label class="form-label fw-medium">Días Solicitados</label>
            <div class="flex items-center">
              <span class="text-xl font-bold text-gray-600" id="diasSolicitadosDisplay">0</span>
              <span class="text-gray-600 ms-2">días</span>
            </div>
          </div>
        </div>
        ${tipoPermiso === 'Vacaciones' ? `
          ${diasDisponiblesPorAno.length > 0 ? `
            <div class="mt-3">
              <label for="yearSelect" class="form-label fw-medium">Seleccionar Año <span class="text-red-600">*</span></label>
              <select id="yearSelect" class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" required>
                <option value="" disabled selected>Seleccione un año</option>
                ${diasDisponiblesPorAno.map(ano => `
                  <option value="${ano.ano}" data-dias="${ano.dias}" data-is-expired="${parseInt(ano.ano) === currentYear - 2 ? 'true' : 'false'}" style="${parseInt(ano.ano) === currentYear - 2 ? 'color: red;' : ''}">
                    ${ano.ano} (${ano.dias} días)${parseInt(ano.ano) === currentYear - 2 ? ' - Año vencido' : ''}
                  </option>
                `).join('')}
              </select>
              <small class="text-gray-600">Año del que se descontarán los días</small>
              <div class="mt-2 text-blue-600 text-sm">Los años vencidos (en rojo) pueden usarse si tienen días disponibles.</div>
              <div id="yearDiasDisponibles" class="mt-2 text-gray-600"></div>
            </div>
          ` : `
            <div class="mt-3 text-red-600">
              No hay años con días disponibles para solicitar vacaciones. Contacte al administrador.
            </div>
          `}
        ` : ''}
      </div>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-3 mb-3">
        <div>
          <label for="fechaInicio" class="form-label fw-medium">Fecha Inicio <span class="text-red-600">*</span></label>
          <input type="date" class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="fechaInicio" name="fechaInicio" required>
          <small class="text-gray-600">Primer día de la solicitud</small>
        </div>
        <div>
          <label for="fechaFin" class="form-label fw-medium">Fecha Fin <span class="text-red-600">*</span></label>
          <input type="date" class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="fechaFin" name="fechaFin" required>
          <small class="text-gray-600">Último día de la solicitud</small>
        </div>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-3 mb-3">
        <div>
          <label for="totalDias" class="form-label font-semibold">Total Días</label>
          <input type="text" class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="totalDias" name="totalDias" readonly>
          <small class="text-gray-600">Días laborables calculados automáticamente</small>
        </div>
        <div>
          <label for="fechaReincorporacion" class="form-label font-semibold">Fecha Reincorporación</label>
          <input type="date" class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="fechaReincorporacion" name="fechaReincorporacion" readonly>
          <small class="text-gray-600">Día en que regresará al trabajo</small>
        </div>
      </div>
      <div class="mb-3">
        <label for="motivo" class="form-label fw-medium">Motivo${isMotivoRequired ? ' <span class="text-red-600">*</span>' : ''}</label>
        <textarea class="form-control border-gray-300 focus:ring-blue-500 focus:border-blue-500" id="motivo" name="motivo" rows="3" placeholder="Escriba el motivo de la solicitud${isMotivoRequired ? ' (requerido)' : ' (opcional)'}" ${isMotivoRequired ? 'required' : ''}></textarea>
        <small class="text-gray-600">Detalles adicionales sobre la solicitud</small>
      </div>
    `;
  }

  formFieldsContainer.innerHTML = formFields;
  console.log('Form fields generados:', formFieldsContainer.innerHTML);
  console.log('Verificando elementos después de renderizar:', {
    yearSelect: !!document.getElementById('yearSelect'),
    yearDiasDisponibles: !!document.getElementById('yearDiasDisponibles'),
    totalDias: !!document.getElementById('totalDias'),
    diasSolicitadosDisplay: !!document.getElementById('diasSolicitadosDisplay'),
    formError: !!document.getElementById('formError')
  });

  setupDateInputs();
  if (tipoPermiso === 'Permiso por hora') {
    setupHoraInputs();
  }
  if (tipoPermiso === 'Vacaciones' && diasDisponiblesPorAno.length > 0) {
    setupYearSelection();
  }
}
//Esta función valida que la suma de días seleccionados por año coincida con totalDias y actualiza el indicador de días solicitados.
function setupYearSelection() {
  console.log('setupYearSelection ejecutado');
  const yearSelect = document.getElementById('yearSelect');
  const yearDiasDisponibles = document.getElementById('yearDiasDisponibles');
  const totalDiasInput = document.getElementById('totalDias');
  const diasSolicitadosDisplay = document.getElementById('diasSolicitadosDisplay');
  const formError = document.getElementById('formError');
  const currentYear = new Date().getFullYear();

  if (!yearSelect || !yearDiasDisponibles || !totalDiasInput || !diasSolicitadosDisplay || !formError) {
    console.error('Faltan elementos para setupYearSelection', {
      yearSelect: !!yearSelect,
      yearDiasDisponibles: !!yearDiasDisponibles,
      totalDiasInput: !!totalDiasInput,
      diasSolicitadosDisplay: !!diasSolicitadosDisplay,
      formError: !!formError
    });
    return;
  }

  function updateYearDisplay() {
    const selectedOption = yearSelect.options[yearSelect.selectedIndex];
    const ano = selectedOption.value;
    const diasDisponibles = selectedOption.dataset.dias ? parseInt(selectedOption.dataset.dias) : 0;
    const isExpired = selectedOption.dataset.isExpired === 'true';
    console.log('Año seleccionado:', { ano, diasDisponibles, isExpired });

    if (ano) {
      let message = `Días disponibles para ${ano}: ${diasDisponibles}`;
      if (isExpired) {
        message += `<br><span class="text-blue-600">Año vencido (${currentYear - 2}). Puede usar los ${diasDisponibles} días disponibles.</span>`;
      } else if (ano == currentYear) {
        message += `<br><span class="text-blue-600">Año actual (${currentYear}). Puede solicitar más días de los disponibles.</span>`;
      } else {
        message += `<br><span class="text-blue-600">Año válido (${ano}).</span>`;
      }
      yearDiasDisponibles.innerHTML = message;
    } else {
      yearDiasDisponibles.innerHTML = '';
    }

    const totalDias = parseInt(totalDiasInput.value) || 0;
    diasSolicitadosDisplay.textContent = totalDias;

    if (totalDias > 0 && ano && ano != currentYear && totalDias > diasDisponibles) {
      formError.textContent = `No puede solicitar ${totalDias} días. Solo tiene ${diasDisponibles} días disponibles para ${ano}.`;
      formError.classList.remove('d-none');
    } else {
      formError.classList.add('d-none');
    }
  }

  yearSelect.addEventListener('change', updateYearDisplay);
  totalDiasInput.addEventListener('change', updateYearDisplay);
  updateYearDisplay();
}
function setupHoraInputs() {
  const horaInicioInput = document.getElementById('horaInicio');
  const horaFinInput = document.getElementById('horaFin');
  const horasSolicitadasInput = document.getElementById('horasSolicitadas');
  const formError = document.getElementById('formError');

  if (horaInicioInput && horaFinInput && horasSolicitadasInput) {
    function calcularHoras() {
      const horaInicio = horaInicioInput.value;
      const horaFin = horaFinInput.value;
      formError.classList.add('d-none');

      if (!horaInicio || !horaFin) {
        formError.textContent = 'Seleccione ambas horas.';
        formError.classList.remove('d-none');
        horasSolicitadasInput.value = '';
        return;
      }

      const [inicioHoras, inicioMinutos] = horaInicio.split(':').map(Number);
      const [finHoras, finMinutos] = horaFin.split(':').map(Number);

      const inicio = new Date(0, 0, 0, inicioHoras, inicioMinutos);
      const fin = new Date(0, 0, 0, finHoras, finMinutos);

      if (fin <= inicio) {
        formError.textContent = 'La hora de fin debe ser posterior a la hora de inicio.';
        formError.classList.remove('d-none');
        horasSolicitadasInput.value = '';
        return;
      }

      const diffMs = fin - inicio;
      const horas = diffMs / (1000 * 60 * 60);
      if (horas < 0.5 || horas > 8) {
        formError.textContent = 'El permiso debe ser entre 0.5 y 8 horas.';
        formError.classList.remove('d-none');
        horasSolicitadasInput.value = '';
        return;
      }

      horasSolicitadasInput.value = horas.toFixed(1);
    }

    horaInicioInput.addEventListener('change', calcularHoras);
    horaFinInput.addEventListener('change', calcularHoras);
  }
}

    function setupDateInputs() {
      const fechaInicioInput = document.getElementById('fechaInicio');
      const fechaFinInput = document.getElementById('fechaFin');
      const totalDiasInput = document.getElementById('totalDias');
      const fechaReincorporacionInput = document.getElementById('fechaReincorporacion');
      const formError = document.getElementById('formError');

      if (!formError) {
        console.error('No se encontró el elemento formError');
        return;
      }

      if (fechaInicioInput && fechaFinInput && totalDiasInput && fechaReincorporacionInput) {
        function actualizarCampos() {
          const fechaInicio = fechaInicioInput.value;
          const fechaFin = fechaFinInput.value;
          console.log('Actualizando campos:', { fechaInicio, fechaFin });

          formError.classList.add('d-none');
          totalDiasInput.value = '';
          fechaReincorporacionInput.value = '';
          updateDiasSolicitados();

          if (!fechaInicio || !fechaFin) {
            formError.textContent = 'Seleccione ambas fechas.';
            formError.classList.remove('d-none');
            return;
          }

          const resultadoDias = calcularTotalDias(fechaInicio, fechaFin);
          if (resultadoDias.error) {
            formError.textContent = resultadoDias.error;
            formError.classList.remove('d-none');
            return;
          }

          totalDiasInput.value = resultadoDias.dias;
          updateDiasSolicitados();

          const fechaReincorporacion = calcularFechaReincorporacion(fechaFin);
          if (fechaReincorporacion) {
            fechaReincorporacionInput.value = fechaReincorporacion;
          } else {
            formError.textContent = 'No se pudo calcular la fecha de reincorporación.';
            formError.classList.remove('d-none');
          }
        }

        fechaInicioInput.removeEventListener('change', actualizarCampos);
        fechaFinInput.removeEventListener('change', actualizarCampos);

        fechaInicioInput.addEventListener('change', actualizarCampos);
        fechaFinInput.addEventListener('change', actualizarCampos);

        actualizarCampos();
      }
    }


  const form = document.getElementById('solicitudForm');
  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formError = document.getElementById('formError');
      formError.textContent = '';
      formError.classList.add('d-none');

      const nombrePersona = document.getElementById('nombrePersona').value;
      const tipoPermiso = document.getElementById('tipoPermiso').value;
      const fechaSolicitud = document.getElementById('fechaSolicitud').value;
      const observaciones = document.getElementById('motivo')?.value || '';
      let data = {
        nombrePersona,
        tipo_permiso: tipoPermiso,
        observaciones,
      };

      if (tipoPermiso === 'Permiso por hora') {
        const fechaPermiso = document.getElementById('fechaPermiso').value;
        const horaInicio = document.getElementById('horaInicio').value;
        const horaFin = document.getElementById('horaFin').value;
        const horasSolicitadas = parseFloat(document.getElementById('horasSolicitadas').value);
        if (!fechaPermiso || !horaInicio || !horaFin || !horasSolicitadas || horasSolicitadas < 0.5 || horasSolicitadas > 8) {
          formError.textContent = 'Por favor, complete correctamente la fecha, horas de inicio, fin y total (0.5 a 8).';
          formError.classList.remove('d-none');
          return;
        }
        data.fecha_inicio = fechaPermiso;
        data.fecha_fin = fechaPermiso;
        data.hora_inicio = horaInicio;
        data.hora_fin = horaFin;
        data.horas_solicitadas = horasSolicitadas;
        data.fecha_reincorporacion = fechaPermiso;
      } else {
        const fechaInicio = document.getElementById('fechaInicio').value;
        const fechaFin = document.getElementById('fechaFin').value;
        const totalDias = parseInt(document.getElementById('totalDias').value) || 0;
        const fechaReincorporacion = document.getElementById('fechaReincorporacion').value;
        const diasDisponibles = parseInt(document.getElementById('diasDisponiblesDisplay')?.textContent || '<%= diasDisponibles ? diasDisponibles.total : 0 %>');
        const motivo = document.getElementById('motivo').value;

        if (!fechaInicio || !fechaFin) {
          formError.textContent = 'Seleccione las fechas de inicio y fin.';
          formError.classList.remove('d-none');
          return;
        }
        if (new Date(fechaInicio) > new Date(fechaFin)) {
          formError.textContent = 'La fecha de inicio no puede ser posterior a la fecha de fin.';
          formError.classList.remove('d-none');
          return;
        }
        if (totalDias === 0) {
          formError.textContent = 'No se encontraron días laborables en el rango seleccionado.';
          formError.classList.remove('d-none');
          return;
        }
        if (tipoPermiso === 'Vacaciones' && totalDias > diasDisponibles) {
          formError.textContent = `No tiene suficientes días disponibles. Solicitó ${totalDias} días, pero solo tiene ${diasDisponibles}.`;
          formError.classList.remove('d-none');
          return;
        }
        if ((tipoPermiso === 'Licencia por duelo' || tipoPermiso === 'Pase de salida laboral') && !motivo) {
          formError.textContent = `Por favor, proporcione un motivo para la ${tipoPermiso.toLowerCase()}. Este campo es obligatorio.`;
          formError.classList.remove('d-none');
          return;
        }
        data.fecha_inicio = fechaInicio;
        data.fecha_fin = fechaFin;
        data.total_dias = totalDias;
        data.fecha_reincorporacion = fechaReincorporacion;
        data.motivo = motivo;
      }

      Swal.fire({
        title: '¿Confirmar envío?',
        text: `Solicitará una ${tipoPermiso.toLowerCase()}${tipoPermiso === 'Permiso por hora' ? ` de ${data.horas_solicitadas} horas` : ` de ${data.total_dias} días`}. ¿Desea continuar?`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Sí, enviar',
        cancelButtonText: 'Cancelar'
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            const response = await fetch('/solicitud', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(data)
            });

            const result = await response.json();

            if (response.ok) {
              Swal.fire({
                icon: 'success',
                title: '¡Solicitud enviada!',
                html: `
                  <p>Su solicitud ha sido registrada.</p>
                  <div class="alert alert-info mt-3">
                    <i class="bi bi-info-circle me-2"></i>
                    Se ha enviado un correo a su jefe inmediato.
                  </div>
                `,
                timer: 5000,
                showConfirmButton: true
              }).then(() => location.reload());
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error al enviar',
                text: result.error || 'No se pudo procesar la solicitud.'
              });
            }
          } catch (error) {
            console.error('Error al enviar solicitud:', error);
            Swal.fire({
              icon: 'error',
              title: 'Error de conexión',
              text: 'No se pudo conectar con el servidor.'
            });
          }
        }
      });
    });
  }
 function setupFormSubmission() {
  const form = document.getElementById('solicitudForm');
  if (!form) {
    console.error('Formulario solicitudForm no encontrado');
    return;
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formError = document.getElementById('formError');
    const formErrorFile = document.getElementById('formErrorFile');
    formError.textContent = '';
    formError.classList.add('d-none');
    formErrorFile.textContent = '';
    formErrorFile.classList.add('d-none');

    const nombrePersona = document.getElementById('nombrePersona').value;
    const tipoPermiso = document.getElementById('tipoPermiso').value;
    const adjuntos = document.getElementById('adjuntos')?.files || [];
    const observaciones = document.getElementById('motivo')?.value || '';

    // Verificar firma para solicitudes de Vacaciones
    if (tipoPermiso === 'Vacaciones') {
      const hasSignature = await checkSignature();
      if (!hasSignature) {
        Swal.fire({
          icon: 'warning',
          title: 'Firma Requerida',
          html: `
            <p>No tienes una firma registrada.</p>
            <p>Por favor, sube tu firma antes de enviar una solicitud de vacaciones.</p>
          `,
          confirmButtonText: 'Subir Firma',
          showCancelButton: true,
          cancelButtonText: 'Cancelar',
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
        }).then((result) => {
          if (result.isConfirmed) {
            // Cerrar modales actuales
            const solicitudModal = bootstrap.Modal.getInstance(document.getElementById('solicitudFormModal'));
            if (solicitudModal) solicitudModal.hide();
            const tipoModal = bootstrap.Modal.getInstance(document.getElementById('tipoSolicitudModal'));
            if (tipoModal) tipoModal.hide();
            // Abrir modal de firma
            const signatureModal = new bootstrap.Modal(document.getElementById('signatureModal'));
            signatureModal.show();
          }
        });
        return;
      }
    }

    // Validaciones de archivos
    if (adjuntos.length > 10) {
      formErrorFile.textContent = 'No puede subir más de 10 archivos.';
      formErrorFile.classList.remove('d-none');
      return;
    }

    const maxFileSize = 5 * 1024 * 1024; // 5MB
    const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png'];
    for (let file of adjuntos) {
      if (file.size > maxFileSize) {
        formErrorFile.textContent = `El archivo ${file.name} excede el tamaño máximo de 5MB.`;
        formErrorFile.classList.remove('d-none');
        return;
      }
      if (!allowedTypes.includes(file.type)) {
        formErrorFile.textContent = `El archivo ${file.name} no es un formato permitido (.pdf, .jpg, .png).`;
        formErrorFile.classList.remove('d-none');
        return;
      }
    }

    let data = {
      nombrePersona,
      tipo_permiso: tipoPermiso,
      observaciones,
    };

    if (tipoPermiso === 'Permiso por hora') {
      const fechaPermiso = document.getElementById('fechaPermiso').value;
      const horaInicio = document.getElementById('horaInicio').value;
      const horaFin = document.getElementById('horaFin').value;
      const horasSolicitadas = parseFloat(document.getElementById('horasSolicitadas').value);

      if (!fechaPermiso || !horaInicio || !horaFin || !horasSolicitadas || horasSolicitadas < 0.5 || horasSolicitadas > 8) {
        formError.textContent = 'Por favor, complete correctamente la fecha, horas de inicio, fin y total (0.5 a 8).';
        formError.classList.remove('d-none');
        return;
      }

      data.fecha_permiso = fechaPermiso;
      data.hora_inicio = horaInicio;
      data.hora_fin = horaFin;
      data.horas_solicitadas = horasSolicitadas;
      data.fecha_inicio = fechaPermiso;
      data.fecha_fin = fechaPermiso;
      data.fecha_reincorporacion = fechaPermiso;
    } else {
      const fechaInicio = document.getElementById('fechaInicio').value;
      const fechaFin = document.getElementById('fechaFin').value;
      const totalDias = parseInt(document.getElementById('totalDias').value) || 0;
      const fechaReincorporacion = document.getElementById('fechaReincorporacion').value;
      const diasDisponibles = parseInt(document.getElementById('diasDisponiblesDisplay')?.textContent || '<%= diasDisponibles ? diasDisponibles.total : 0 %>');
      const motivo = document.getElementById('motivo').value;

      if (!fechaInicio || !fechaFin) {
        formError.textContent = 'Seleccione las fechas de inicio y fin.';
        formError.classList.remove('d-none');
        return;
      }
      if (new Date(fechaInicio) > new Date(fechaFin)) {
        formError.textContent = 'La fecha de inicio no puede ser posterior a la fecha de fin.';
        formError.classList.remove('d-none');
        return;
      }
      if (totalDias === 0) {
        formError.textContent = 'No se encontraron días laborables en el rango seleccionado.';
        formError.classList.remove('d-none');
        return;
      }
      if (tipoPermiso === 'Vacaciones' && totalDias > diasDisponibles) {
        formError.textContent = `No tiene suficientes días disponibles. Solicitó ${totalDias} días, pero solo tiene ${diasDisponibles}.`;
        formError.classList.remove('d-none');
        return;
      }
      if ((tipoPermiso === 'Licencia por duelo' || tipoPermiso === 'Pase de salida laboral') && !motivo) {
        formError.textContent = `Por favor, proporcione un motivo para la ${tipoPermiso.toLowerCase()}. Este campo es obligatorio.`;
        formError.classList.remove('d-none');
        return;
      }
      if (tipoPermiso === 'Vacaciones') {
        const yearSelect = document.getElementById('yearSelect');
        const selectedOption = yearSelect.options[yearSelect.selectedIndex];
        const ano = selectedOption.value;
        const diasDisponiblesAno = parseInt(selectedOption.dataset.dias) || 0;

        console.log('Depuración solicitud:', {
          ano,
          totalDias,
          diasDisponiblesAno,
          fechaInicio,
          fechaFin,
        });

        if (!ano) {
          formError.textContent = 'Seleccione un año para la solicitud.';
          formError.classList.remove('d-none');
          return;
        }
        if (ano !== '2025' && totalDias > diasDisponiblesAno) {
          formError.textContent = `No puede solicitar ${totalDias} días. Solo tiene ${diasDisponiblesAno} días disponibles para ${ano}.`;
          formError.classList.remove('d-none');
          return;
        }
        data.yearSelections = [{ ano: parseInt(ano), dias: totalDias }];
      }

      data.fecha_inicio = fechaInicio;
      data.fecha_fin = fechaFin;
      data.total_dias = totalDias;
      data.fecha_reincorporacion = fechaReincorporacion;
      data.motivo = motivo;
    }

    // Preparar FormData para enviar archivos y datos
    const formData = new FormData();
    for (const [key, value] of Object.entries(data)) {
      if (key === 'yearSelections' && value) {
        formData.append('yearSelections', JSON.stringify(value));
      } else {
        formData.append(key, value);
      }
    }
    for (const file of adjuntos) {
      formData.append('adjuntos', file);
    }

    Swal.fire({
      title: '¿Confirmar envío?',
      text: `Solicitará una ${tipoPermiso.toLowerCase()}${tipoPermiso === 'Permiso por hora' ? ` de ${data.horas_solicitadas} horas` : ` de ${data.total_dias} días`}${tipoPermiso === 'Vacaciones' && data.yearSelections ? ` (${data.yearSelections.map(s => `${s.dias} días de ${s.ano}`).join(', ')})` : ''}${adjuntos.length > 0 ? ` con ${adjuntos.length} adjunto(s)` : ''}. ¿Desea continuar?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Aceptar',
      cancelButtonText: 'Cancelar',
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          console.log('Enviando FormData:', Object.fromEntries(formData));
          const response = await fetch('/solicitud', {
            method: 'POST',
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || '',
            },
            credentials: 'include',
            body: formData,
          });

          const resultado = await response.json();
          console.log('Respuesta de /solicitud:', resultado);

          if (response.ok) {
            Swal.fire({
              icon: 'success',
              title: '¡Solicitud enviada!',
              html: `
                <p>Su solicitud ha sido registrada.</p>
                <div class="alert alert-info mt-4">
                  <i class="bi bi-info-circle me-2"></i>
                  Se ha enviado un correo a su jefe inmediato.
                </div>
              `,
              timer: 5000,
              showConfirmButton: true,
            }).then(() => location.reload());
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error al enviar',
              text: resultado.error || 'No se pudo procesar la solicitud.',
            });
            formError.textContent = resultado.error || 'Error al procesar la solicitud.';
            formError.classList.remove('d-none');
          }
        } catch (error) {
          console.error('Error al enviar solicitud:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error de conexión',
            text: 'No se pudo conectar con el servidor.',
          });
          formError.textContent = 'No se pudo conectar con el servidor.';
          formError.classList.remove('d-none');
        }
      }
    });
  });
}
  async function cancelarSolicitud(id) {
      Swal.fire({
        title: '¿Cancelar esta solicitud?',
        text: "Esta acción no se puede deshacer.",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Sí, cancelar',
        cancelButtonText: 'No, mantener'
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            const response = await fetch(`/cancelar-solicitud/${id}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' }
            });

            const result = await response.json();

            if (response.ok) {
              Swal.fire({
                icon: 'success',
                title: 'Solicitud cancelada',
                text: 'La solicitud ha sido cancelada.',
                timer: 3000,
                showConfirmButton: false
              }).then(() => location.reload());
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error al cancelar',
                text: result.error || 'No se pudo cancelar la solicitud.'
              });
            }
          } catch (error) {
            console.error('Error al cancelar solicitud:', error);
            Swal.fire({
              icon: 'error',
              title: 'Error de conexión',
              text: 'No se pudo conectar con el servidor.'
            });
          }
        }
      });
    }

    function setupDetailsButtons() {
      document.querySelectorAll('.detalles-btn').forEach(button => {
        button.addEventListener('click', () => {
          const id = button.dataset.id;
          const solicitud = solicitudes.find(s => s.id == id);

          if (solicitud) {
            currentSolicitud = solicitud;

            document.getElementById('detalleNombre').textContent = solicitud.nombre || 'No disponible';
            document.getElementById('detalleArea').textContent = solicitud.area_solicitante || 'No disponible';
            document.getElementById('detalleFechaSolicitud').textContent = solicitud.fecha_solicitud ? new Date(solicitud.fecha_solicitud).toISOString().split('T')[0] : 'No disponible';
            document.getElementById('detalleTipoPermiso').textContent = solicitud.tipo_permiso || 'Vacaciones';

            const periodo = `${solicitud.fecha_inicio ? new Date(solicitud.fecha_inicio).toISOString().split('T')[0] : 'No disponible'} - ${solicitud.fecha_fin ? new Date(solicitud.fecha_fin).toISOString().split('T')[0] : 'No disponible'}`;
            document.getElementById('detallePeriodo').textContent = periodo;

            document.getElementById('detalleFechaReincorporacion').textContent = solicitud.fecha_reincorporacion ? new Date(solicitud.fecha_reincorporacion).toISOString().split('T')[0] : 'No disponible';
            document.getElementById('detalleDiasHoras').textContent = solicitud.horas_solicitadas ? `${solicitud.horas_solicitadas} horas` : `${solicitud.total_dias || 0} días`;

            let estadoBadge = '';
            if (solicitud.estado === 'Aprobado') {
              estadoBadge = `<span class="badge bg-green-100 text-green-600">Aprobado</span>`;
            } else if (solicitud.estado === 'Rechazado') {
              estadoBadge = `<span class="badge bg-red-100 text-red-600">Rechazado</span>`;
            } else if (solicitud.estado === 'Pendiente') {
              estadoBadge = `<span class="badge bg-yellow-100 text-yellow-600">Pendiente</span>`;
            } else {
              estadoBadge = `<span class="badge bg-blue-100 text-blue-600">${solicitud.estado || 'Desconocido'}</span>`;
            }
            document.getElementById('detalleEstado').innerHTML = estadoBadge;

            document.getElementById('detalleObservaciones').textContent = solicitud.observaciones || 'Sin observaciones';
            document.getElementById('detalleMotivo').textContent = solicitud.motivo || 'Sin motivo';

            if (solicitud.estado === 'Rechazado' && solicitud.observaciones_rechazo) {
              document.getElementById('comentariosRechazo').style.display = 'block';
              document.getElementById('detalleComentariosRechazo').textContent = solicitud.observaciones_rechazo;
            } else {
              document.getElementById('comentariosRechazo').style.display = 'none';
            }

            const generatePDFBtn = document.getElementById('generatePDFBtn');
            const cancelarSolicitudBtn = document.getElementById('cancelarSolicitudBtn');
            if (solicitud.estado === 'Aprobado') {
              generatePDFBtn.style.display = 'block';
              cancelarSolicitudBtn.style.display = 'none';
            } else if (solicitud.estado === 'Pendiente') {
              generatePDFBtn.style.display = 'none';
              cancelarSolicitudBtn.style.display = 'block';
              cancelarSolicitudBtn.dataset.id = id;
            } else {
              generatePDFBtn.style.display = 'none';
              cancelarSolicitudBtn.style.display = 'none';
            }
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'No se encontraron los detalles de esta solicitud.'
            });
          }
        });
      });
    }
// Función para generar PDF
  async function generatePDF(solicitud) {
    try {
      console.log('Generando PDF para solicitud:', solicitud.id);
      
      const response = await fetch('/generate-pdf', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || ''
        },
        credentials: 'include',
        body: JSON.stringify({
          id: solicitud.id,
          nombre: solicitud.nombre || '',
          fecha_solicitud: solicitud.fecha_solicitud || '',
          area_solicitante: solicitud.area_solicitante || '',
          fecha_inicio: solicitud.fecha_inicio || '',
          fecha_fin: solicitud.fecha_fin || '',
          fecha_reincorporacion: solicitud.fecha_reincorporacion || '',
          total_dias: solicitud.total_dias || 0,
          anio: solicitud.fecha_inicio ? new Date(solicitud.fecha_inicio).getFullYear() : '',
          observaciones: solicitud.observaciones || ''
        })
      });

      if (!response.ok) {
        const error = await response.json();
        console.error('Error del servidor:', error);
        
        if (response.status === 404 && error.error === 'Firma no encontrada para este usuario') {
          Swal.fire({
            icon: 'error',
            title: 'Firma no encontrada',
            text: 'No se encontró tu firma en el sistema. Por favor, sube tu firma primero.',
            footer: '<a href="#" data-bs-toggle="modal" data-bs-target="#signatureModal">Subir firma</a>'
          });
          return;
        }
        
        throw new Error(error.error || 'Error al generar PDF');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `solicitud_${solicitud.id}.pdf`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);

      Swal.fire({
        icon: 'success',
        title: 'PDF Generado',
        text: 'El documento se ha descargado correctamente.',
        timer: 2000,
        showConfirmButton: false
      });
    } catch (error) {
      console.error('Error al generar PDF:', error.message);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message.includes('Firma no encontrada') 
          ? 'No se encontró tu firma. Sube tu firma primero.' 
          : `No se pudo generar el PDF: ${error.message}`
      });
    }
  }

   function setupPDFGeneration() {
      document.getElementById('generatePDFBtn').addEventListener('click', async () => {
        if (!currentSolicitud) {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'No se encontraron los detalles de esta solicitud para generar el PDF.'
          });
          return;
        }
        await generatePDF(currentSolicitud);
      });
    }

    function setupTableFilters() {
      const dropdownItems = document.querySelectorAll('#filtroEstado .dropdown-item');
      const searchInput = document.getElementById('searchHistorico');
      const tableBody = document.getElementById('historico-table-body');
      const rows = document.querySelectorAll('#historico-table tbody tr:not(#no-data-message)');
      let currentFilter = 'all';
      let currentSearch = '';
      let searchTimeout;

      function applyFilters() {
        console.log('Aplicando filtros:', { estado: currentFilter, búsqueda: currentSearch });

        let visibleRows = 0;
        rows.forEach(row => {
          const estado = row.dataset.estado?.toLowerCase() || 'desconocido';
          const tipo = row.dataset.tipo?.toLowerCase() || 'vacaciones';
          const searchText = row.dataset.search?.toLowerCase() || '';

          let showByFilter = false;
          if (currentFilter === 'all') {
            showByFilter = true;
          } else if (currentFilter === 'aprobado') {
            showByFilter = estado.includes('aprobado');
          } else if (currentFilter === 'rechazado') {
            showByFilter = estado === 'rechazado';
          } else {
            showByFilter = tipo === currentFilter.toLowerCase();
          }

          const showBySearch = currentSearch ? searchText.includes(currentSearch) : true;

          const shouldShow = showByFilter && showBySearch;
          row.style.display = shouldShow ? '' : 'none';
          if (shouldShow) visibleRows++;
        });

        const noDataMessage = document.getElementById('no-data-message');
        if (visibleRows === 0 && !noDataMessage) {
          tableBody.insertAdjacentHTML('beforeend', `
            <tr id="no-data-message">
              <td colspan="8" class="text-center py-6">
                <i class="bi bi-search text-4xl text-gray-400"></i>
                <p class="mt-2 text-gray-600">No se encontraron solicitudes para los criterios seleccionados</p>
              </td>
            </tr>
          `);
        } else if (visibleRows > 0 && noDataMessage) {
          noDataMessage.remove();
        }
      }

      dropdownItems.forEach(item => {
        item.removeEventListener('click', handleFilterClick);
        item.addEventListener('click', handleFilterClick);

        function handleFilterClick(e) {
          e.preventDefault();
          currentFilter = e.target.dataset.filter?.toLowerCase() || 'all';
          const filtroEstadoBtn = document.getElementById('filtroEstado');
          if (filtroEstadoBtn) {
            filtroEstadoBtn.textContent = currentFilter === 'all' ? 'Filtrar' : `Filtrar: ${currentFilter.charAt(0).toUpperCase() + currentFilter.slice(1)}`;
          }
          applyFilters();
        }
      });

      if (searchInput) {
        searchInput.removeEventListener('input', handleSearchInput);
        searchInput.addEventListener('input', handleSearchInput);

        function handleSearchInput() {
          clearTimeout(searchTimeout);
          searchTimeout = setTimeout(() => {
            currentSearch = searchInput.value.toLowerCase().trim();
            applyFilters();
          }, 300);
        }
      }
    }

   
    function setupTableActions() {
      document.querySelectorAll('.pdf-btn').forEach(button => {
        button.addEventListener('click', async () => {
          const id = button.dataset.id;
          const solicitud = solicitudes.find(s => s.id == id);

          if (solicitud) {
            currentSolicitud = solicitud;
            await generatePDF(solicitud);
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'No se encontraron los detalles de esta solicitud para generar el PDF.'
            });
          }
        });
      });

      document.querySelectorAll('.cancelar-btn').forEach(button => {
        button.addEventListener('click', () => {
          const id = button.dataset.id;
          cancelarSolicitud(id);
        });
      });

      document.getElementById('cancelarSolicitudBtn').addEventListener('click', function() {
        const id = this.dataset.id;
        cancelarSolicitud(id);
      });
    }

    function setupTipoSolicitud() {
      document.querySelectorAll('.tipo-solicitud-card').forEach(card => {
        card.addEventListener('click', () => {
          const tipo = card.dataset.tipo;
          loadDynamicForm(tipo);
          const tipoSolicitudModal = bootstrap.Modal.getInstance(document.getElementById('tipoSolicitudModal'));
          tipoSolicitudModal.hide();
          const solicitudFormModal = new bootstrap.Modal(document.getElementById('solicitudFormModal'));
          solicitudFormModal.show();
        });
      });
    }

    document.addEventListener('DOMContentLoaded', () => {
      console.log('DOMContentLoaded: Inicializando scripts');
      setupFormSubmission();
      setupDetailsButtons();
      setupPDFGeneration();
      setupTableFilters();
      setupTableActions();
      setupTipoSolicitud();
      setupSignatureForm();
      setupNuevaSolicitudButton(); // Agregar el manejador para el botón "Nueva Solicitud"
      
});
  
  </script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
